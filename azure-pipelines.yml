# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# Setting "build and deploy" trigger - master branch with 'build' tag
trigger:
  batch: true
  tags:
    include:
      - '*Build*'
  paths:
    exclude:
      - README.md


resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  env_type: 'prod'
  dockerRegistryServiceConnection: 'ascicdacr'
  imageRepositoryFE: 'ascicdacr/fe-nginx-$(env_type)'
  imageRepositoryBE-nginx: 'ascicdacr/be-nginx-$(env_type)'
  imageRepositoryBE-php: 'ascicdacr/be-php-$(env_type)'
  kustomizationFolder: '$(Pipeline.Workspace)/manifests.$(env_type)/'
  containerRegistry: 'ascicdacr.azurecr.io'
  dockerfilePathFE: './frontend/Dockerfile'
  dockerfilePathBE-nginx: './backend/Dockerfile-nginx'
  dockerfilePathBE-php: './backend/Dockerfile-php'
  frontendContext: './frontend/'
  backendContext: './backend/'
  tag: '$(Build.SourceBranchName)_$(Build.BuildNumber)'
#  tag: 'latest'
  imagePullSecret: 'ascicdacr-auth'
  k8sNamespace: $(env_type)
  k8sConnection: 'as-cicd-k8s'
  DB_HOST: 'as-cicd-dbserver.mysql.database.azure.com'
  DB_NAME: 'api_db'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build FE image
      inputs:
        command: Build
        repository: $(imageRepositoryFE)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(frontendContext)
        dockerfile: $(dockerfilePathFE)
        arguments: '--build-arg ENV_TYPE=$(env_type)'
        tags: $(tag)
    - task: Docker@2
      displayName: Build BE-nginx image
      inputs:
        command: Build
        repository: $(imageRepositoryBE-nginx)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(backendContext)
        dockerfile: $(dockerfilePathBE-nginx)
        arguments: '--build-arg ENV_TYPE=$(env_type)'
        tags: $(tag)
    - task: Docker@2
      displayName: Build BE-php image
      inputs:
        command: Build
        repository: $(imageRepositoryBE-php)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(backendContext)
        dockerfile: $(dockerfilePathBE-php)
        arguments: |
          --build-arg ENV_TYPE=$(env_type)
          --build-arg DB_USERNAME=$(DB_USERNAME)
          --build-arg DB_PASSWORD=$(DB_PASSWORD)
          --build-arg DB_HOST=$(DB_HOST)
          --build-arg DB_NAME=$(DB_NAME)
        tags: $(tag)

    - task: Docker@2
      displayName: Push FE image to container registry
      inputs:
        command: Push
        repository: $(imageRepositoryFE)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)
    - task: Docker@2
      displayName: Push BE-nginx image to container registry
      inputs:
        command: Push
        repository: $(imageRepositoryBE-nginx)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)
    - task: Docker@2
      displayName: Push BE-php image to container registry
      inputs:
        command: Push
        repository: $(imageRepositoryBE-php)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)

    - publish: manifests
      artifact: manifests
    - publish: manifests.$(env_type)
      artifact: manifests.$(env_type)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      vmImage: $(vmImageName)
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              kubernetesServiceConnection: $(k8sConnection)
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from kustomization path
            inputs:
              action: bake
              renderType: kustomize
              kustomizationPath: $(kustomizationFolder)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: $(k8sConnection)
              namespace: $(k8sNamespace)
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepositoryFE):$(tag)
                $(containerRegistry)/$(imageRepositoryBE-nginx):$(tag)
                $(containerRegistry)/$(imageRepositoryBE-php):$(tag)

